The most interesting parts of the example's CSS file:

    It absolutely positions the three elements inside the full-img <div> —
    the <img> in which the full-sized image is displayed,
    an empty <div> that is sized to be the same size as the <img> and 
    put right over the top of it
    (this is used to apply a darkening effect to the image via a semi-transparent background color),
    and a <button> that is used to control the darkening effect.
    It sets the width of any images inside the thumb-bar <div> (so-called "thumbnail" images) to 20%,
    and floats them to the left so they sit next to one another on a line.

Your JavaScript needs to:

    Declare a const array listing the filenames of each image, such as 'pic1.jpg'.
    Loop through the array of filenames,
    and for each one insert an <img> element inside the thumb-bar <div> that embeds that image in the page.
    Add a click event listener to each <img> inside the thumb-bar <div> so that when they are clicked,
    the corresponding image is displayed in the displayed-img <img> element.
    Add a click event listener to the <button> so that when it is clicked,
    a darken effect is applied to the full-size image. When it is clicked again, the darken effect is removed again.

To give you more of an idea, have a look at the finished example (no peeking at the source code!)
Steps to complete

The following sections describe what you need to do.
Declare an array of image filenames

You need to create an array listing the filenames of all the images to include in the gallery.
The array should be declared as a constant.

Looping through the images

We've already provided you with lines that store a reference to the thumb-bar <div> inside a constant called thumbBar,
create a new <img> element, set its src attribute to a placeholder value xxx,
and append this new <img> element inside thumbBar.

You need to:

    Put the section of code below the "Looping through images" comment inside a
    loop that loops through all the filenames in the array.
    In each loop iteration,
    replace the xxx placeholder value with a string that will equal the path to the image in each case.
    We are setting the value of the src attribute to this value in each case.
    Bear in mind that in each case, the image is inside the images directory and its name is pic1.jpg, pic2.jpg, etc.

Adding a click event listener to each thumbnail image

In each loop iteration, you need to add a click event listener to the current newImage —
this listener should find the value of the src attribute of the current image.
Set the src attribute value of the displayed-img <img> to the src value passed in as a parameter.

Alternatively, you can add one event listener to the thumb bar.
Writing a handler that runs the darken/lighten button

That just leaves our darken/lighten <button> —
we've already provided a line that stores a reference to the <button> in a constant called btn.
You need to add a click event listener that:

    Checks the current class name set on the <button> — you can again achieve this by using getAttribute().
    If the class name is "dark", changes the <button> class to "light" (using setAttribute()),
    its text content to "Lighten", and the background-color of the overlay <div> to "rgba(0,0,0,0.5)".
    If the class name is not "dark", changes the <button> class to "dark",
    its text content back to "Darken", and the background-color of the overlay <div> to "rgba(0,0,0,0)".

The following lines provide a basis for achieving the changes stipulated in points 2 and 3 above.

btn.setAttribute('class', xxx);
btn.textContent = xxx;
overlay.style.backgroundColor = xxx;

Hints and tips

    You don't need to edit the HTML or CSS in any way.
